/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
public boolean isSymmetric(TreeNode root) {
    if (root == null) {
        return true;  // An empty tree is symmetric
    }
    return isSymmetricHelper(root.left, root.right);
}

private boolean isSymmetricHelper(TreeNode left, TreeNode right) {
    if (left == null && right == null) {
        return true;  // Both subtrees are empty, considered symmetric
    }
    if (left == null || right == null) {
        return false;  // One subtree is empty while the other is not, considered non-symmetric
    }

    return (left.val == right.val) &&
           isSymmetricHelper(left.left, right.right) &&
           isSymmetricHelper(left.right, right.left);
}

}
